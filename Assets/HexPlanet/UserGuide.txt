HEX PLANET USER GUIDE

Thank you for purchasing HexPlanet Pro!
Operation is extremely simple and leaves tons of room for expansion and customization.  
Simply load the scene called Main located in the Scenes folder and click on the HexSphere gameobject in the inspector.
The detailLevel parameter allows you to specify the number of subdivisions, effectively setting the number of tiles on the planet.
This can range from 1 up to 4, producing a number of tiles between 42 and 2,562.  
The numColors parameter specifies the number of colors used to paint the tiles after theyre created.  You can specify the exact colors used within the Tile class.
This parameter was used for a previous game I made and likely wont be too useful for a broader range of applications, but it can be easily changed or omitted if you want.
Once youve specified a detailLevel, just make sure that the hexmat and pentmat material slots are assigned.  
Ive included a default flat color material for each as well as a cutout material for each which gives a transparent border around each tile.  This creates a cool look for space or abstract games.
Then hit play and look in awe at the procedurally generated hexplanet!

Ive included a simple camera script which lets you rotate around the planet with WASD or arrow keys and zoom in/out with the mouse scroll wheel.
Additionally there is a pointer script which controls the 3D cursor.  You can set the cursor status via an enum within the script.  This pointer status can be used to indicate if a an object under the mouse selection is busy or unselectable for example.

PRO USER SCRIPTING GUIDE

Heres an outline of the various advanced features and functions and how they work:

	Navigation Manager Class
		
		public bool findPath(Tile start, Tile end, out Stack<Tile> pathStack)
			Finds the shortest path between the tiles start and end and returns true if this path exists.
			Feed it a Stack<Tile> when calling the function and if a path was found, the input stack will now be filled with all of the tiles that make up the path
			 with the top of the stack the starting tile, and the bottom of the stack being the destination tile.
			 
		public List<Tile> DFS(Tile start)
			Performs a Depth First Search on the input tile "start" and returns a list of all tiles that are connected to start by navigable paths.
			Any tiles with navigable marked true can be isolated into a closed regions of tiles if non navigable tiles surround that region.
			
		public void drawPath(Stack<Tile> pathStack)
			Uses the LineRenderer attached to the default navigationManager object in the prefabs to draw the input path represented by the stack of tiles.
			This is useful for previewing unit movements or testing your maps navigation properties.
			NOTE that the input stack will be consumed when this function terminates.
			
	MobileUnit Class
	
		public void moveOnPath(Stack<Tile> path)
			Simply calls the coroutine which performs the actual movement
			
		public IEnumerator move(Stack<Tile> path)
			Moves the unit along the input path at its defined moveSpeed by popping tiles from the input path stack and spherically interpolating between its current tile position and the next tiles position.
			Updates its currentTile variable every time it reaches the end of the Slerp.  This is useful for triggering events when units move over certain tiles.
			
		NOTES:  
		-The supplied unit template prefab has a specific transform hierarchy where the visible character mesh/model is placed on a transform as a child of the root transform holding the unit script itself.
		-This is necessary as the root transform should be flush with the faces of the tiles, meaning that the units visible model should be positioned higher in the local Y axis so its feet or base are touching the root transforms center.
		
	Hexsphere Custom Inspector
	
		Generate Tiles Button
		-Generates the spheres tiles if they havent already been generated
		
		Generate Random Regions
		-If tiles have already been generated, each tile will be given one of (numColors) colors randomly with the second color (by default purple) being considered non navigable.
		-This is mostly to illustrate the pathfinding functions but can be modified to do whatever you want and can easily be adapted to create more detailed random world generation
		-Does nothing if no tiles have been generated
		
		Delete Tiles
		-Destroys all tiles generated by that gameobject and removes them from the scene, as well as resets all the lists and variables in Hexsphere
		-Wont affect separate planets

	Tile Custom Inspector
	
		Place Object Interface
		-You can choose an object to place on the currently selected tile (while in Edit mode) by dragging and dropping a prefab or scene object into the gameobject slot in the inspector
		-If the chosen gameobject is a prefab and not currently instanced in the scene, clicking the "Place Object" button will instantiate that prefab, place it on the tile and align that objects local up to the tile normal
		-If the chosen gameobject is an active object in the scene, clicking the "Place Object" button will move that object from its current position to the tiles position and align its local up to the tile normal
		